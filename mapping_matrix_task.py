# -*- coding: utf-8 -*-
"""mapping_matrix_task.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/140jVeJpilxEhfz-ixC86SiHQ-G7Z1jnp
"""

import math
import numpy as np


def negative_matrix(x):
    rows = len(x)
    cols = len(x[0])
    neg = [[-x[i][j] for j in range(cols)] for i in range(rows)]
    return neg


def reverse_matrix(x):
    rows = len(x)
    cols = len(x[0])
    reversed_matrix = [[x[rows - 1 - i][cols - 1 - j] for j in range(cols)] for i in range(rows)]
    return reversed_matrix


def affine_transform(
    x, alpha_deg, scale=(1.0, 1.0), shear=(0.0, 0.0), translate=(0.0, 0.0)
):
    alpha = math.radians(alpha_deg)
    sx, sy = scale
    shx, shy = shear
    tx, ty = translate

    T = [
        [sx * math.cos(alpha) - shx * math.sin(alpha), -math.sin(alpha + shy), tx],
        [math.sin(alpha) + shx * math.cos(alpha), sy * math.cos(alpha + shy), ty],
        [0, 0, 1],
    ]

    transformed_points = []
    for point in x:
        px, py = point
        px_h = [px, py, 1]
        result = [
            sum(px_h[k] * T[i][k] for k in range(3)) for i in range(3)
        ]
        transformed_points.append(result[:2])

    return transformed_points


def print_matrix(matrix, title="Матриця"):
    """Гарне виведення матриці"""
    print(f"\n{title}:")
    for row in matrix:
        print("  ", [round(x, 3) for x in row])


def main():
    A = [[1, 2], [3, 4]]
    print_matrix(A, "Початкова матриця A")

    neg_A = negative_matrix(A)
    print_matrix(neg_A, " Negative matrix (-A)")

    rev_A = reverse_matrix(A)
    print_matrix(rev_A, " Reverse matrix")

    points = [[0, 0], [1, 0], [1, 1], [0, 1]]
    print_matrix(points, " Початкові точки (квадрат)")

    transformed = affine_transform(points, alpha_deg=45, scale=(1.2, 0.8), translate=(2, 1))
    print_matrix(transformed, " Після афінного перетворення")


if __name__ == "__main__":
    main()